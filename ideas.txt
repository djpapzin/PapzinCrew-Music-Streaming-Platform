# PapzinCrew Music Streaming Platform - Status & Ideas

## ‚úÖ Implemented Features
- [x] AI-generated cover art when no cover art is present in metadata
  - [x] Uses Pollinations AI (free, no API key required)
  - [x] Genre-specific styling and prompts
  - [x] Optional custom prompt input for advanced users
- [x] Music library restricted to backend/uploads directory
- [x] Recent songs section showing uploaded tracks
- [x] Basic music player with play/pause, seek, and volume controls

## üé® AI-Generated Cover Art (Completed ‚úÖ)
- [x] Integrate Pollinations AI for cover art generation
- [x] Generate art based on song metadata (title, artist, genre)
- [x] Custom prompt input for advanced users
- [x] Implement optimized prompt structure
- [x] Add genre-specific styling templates
- [x] Implement negative prompting to avoid common AI artifacts
- [ ] Add caching for generated artwork (optional optimization)

## üì§ Uploads Management (Next Priority üöÄ)
- [x] Restrict music display to backend/uploads only
- [x] Recent uploads section
- [x] Show file processing status
- [x] Handle duplicate uploads (check existing tracks before upload)
- [x] Improve upload feedback (fix 100% loading issue during image generation)
- [x] Basic file upload functionality
- [x] Add file validation for supported formats (MP3, WAV, etc.)
- [ ] Track and display play history
- [ ] Add bulk upload support

## üéõÔ∏è Smart Features
- [ ] Auto-generated playlists by BPM/genre/mood
- [ ] Create "Workout Mix" (high-BPM tracks)
- [ ] Create "Chill Mix" (low-BPM tracks)
- [ ] "Radio" mode with similar tracks

## üéµ Audio Analysis
- [ ] Extract and store musical key
- [ ] Calculate and store BPM
- [ ] Enable key/BPM-based searching
- [ ] Create automatic DJ-style transitions
- [ ] Audio waveform visualization
- [ ] Beat detection for visual effects

## ‚ú® User Experience
- [x] Implement drag-and-drop interface
- [x] Upload progress indicators
- [x] Show processing status for uploads
- [ ] Dark/light theme toggle
- [ ] Keyboard shortcuts for player controls
- [ ] Responsive design improvements

## ü§ù Social Features
- [ ] Add playlist sharing
- [ ] Create collaborative playlists
- [ ] Implement like/favorite system
- [ ] User profiles with listening history
- [ ] Follow artists/users

## üîç Search & Discovery
- [ ] Add BPM range search
- [ ] Enable key-based search
- [ ] Add genre/mood filters
- [ ] Create "Similar Tracks" feature
- [ ] Advanced search with multiple criteria
- [ ] Recently played/trending sections

## üöÄ Future Enhancements
- [ ] Mobile app development
- [ ] Offline playback support
- [ ] Podcast/audio book support
- [ ] Integration with music production software
- [ ] Live streaming capabilities

## Research & Optimization
- [x] Research AI image generation APIs
- [ ] Optimize AI prompts for better results
- [ ] Performance optimization for large libraries
- [ ] Accessibility improvements

## Custom Implementation Ideas (Detailed)

### 1. Improved Upload Progress & Feedback 
- [x] Split progress into phases: "Uploading file..." (0-40%), "Processing metadata..." (40-70%), "Generating cover art..." (70-100%)
- [x] Add real-time status messages: "Extracting audio metadata", "Analyzing genre", "Creating AI artwork"
- [x] Show estimated time remaining for each phase
- [x] Add cancel option during image generation (implemented but simplified in UI)
- [x] Display preview of extracted metadata while generating art (implemented but removed for cleaner UI)
- [x] Add progress animation/spinner specifically for AI generation phase

**Implementation Notes**:
- [x] Phased progress system working with proper 0-40-70-100% progression
- [x] Real-time upload speed tracking and time estimates
- [x] Clean progress modal with stage-specific animations and colors
- [x] XMLHttpRequest cancellation functionality (backend ready)
- [x] Enhanced user feedback during all upload phases

### 2. Enhanced Player Experience 
- [ ] Create fullscreen/theater mode for player
- [ ] Enlarge album artwork and controls
- [ ] Add visualizer/waveform display in enlarged mode
- [ ] Include lyrics display area (if available)
- [ ] Add keyboard shortcuts (Space = play/pause, Arrow keys = seek)
- [ ] Smooth transition animations between normal/enlarged modes
- [ ] Remember user's preferred view mode

### 3. Smart Duplicate Detection System 
- [ ] Audio fingerprinting using chromaprint/acoustid
- [x] Metadata comparison (title, artist, duration)
- [ ] File hash comparison for exact duplicates
- [ ] Show duplicate detection results with options:
  - [ ] "Replace existing track"
  - [ ] "Keep both (rename new)"
  - [ ] "Cancel upload"
- [x] Display existing track info when duplicate found
- [ ] Allow user to set duplicate handling preferences
- [ ] Fuzzy matching for similar but not identical tracks

### 4. AI Prompt Generation Agent 
- [ ] Analyze song metadata (genre, mood, BPM, lyrics if available)
- [ ] Create context-aware prompts using GPT/Claude API
- [ ] Genre-specific prompt templates with dynamic elements
- [ ] Mood analysis from audio features (energy, valence, tempo)
- [ ] Learn from user feedback on generated images
- [ ] A/B testing different prompt strategies
- [ ] Fallback to manual prompts if AI agent fails
- [ ] Prompt history and reuse system

**Example Prompt Generation Logic**:
- [ ] Genre: Electronic/House ‚Üí "Futuristic neon cityscape, synthwave aesthetic"
- [ ] Mood: Energetic + High BPM ‚Üí "Dynamic motion blur, vibrant colors"
- [ ] Artist Style: Classical ‚Üí "Elegant orchestral instruments, concert hall"

### 5. WhatsApp Bot Integration 
- [ ] WhatsApp Business API integration
- [ ] Bot commands:
  - [ ] `/search [query]` - Find tracks
  - [ ] `/latest` - Show recent uploads
  - [ ] `/random` - Get random track
  - [ ] `/playlist [name]` - Share playlist
- [ ] Generate secure download links with expiration
- [ ] User authentication via phone number
- [ ] Group admin controls for bot permissions
- [ ] Track download analytics
- [ ] Automatic notifications for new uploads
- [ ] Voice message support for track requests

**Bot Features**:
- [ ] Natural language processing for music requests
- [ ] Share track previews (30-second clips)
- [ ] Create temporary playlists from chat requests
- [ ] Integration with existing user accounts

### 6. Quick Deployment Demo 
- [ ] Docker containerization for easy deployment
- [ ] One-click deployment scripts for:
  - [ ] Heroku
  - [ ] Vercel (frontend)
  - [ ] Railway
  - [ ] DigitalOcean App Platform
- [ ] Environment setup automation
- [ ] Database migration scripts
- [ ] SSL certificate auto-configuration
- [ ] CDN setup for audio files
- [ ] Monitoring and logging setup
- [ ] Backup and recovery procedures

**Demo Components**:
- [ ] Video walkthrough of deployment process
- [ ] Step-by-step documentation
- [ ] Troubleshooting guide
- [ ] Performance optimization tips
- [ ] Scaling recommendations

## Implementation Priority Order
1. [ ] **Upload Progress Improvement** (Quick win, better UX)
2. [ ] **Duplicate Detection** (Prevents storage issues)
3. [ ] **Enhanced Player Experience** (Core feature enhancement)
4. [ ] **AI Prompt Agent** (Improves cover art quality)
5. [ ] **WhatsApp Bot** (New user acquisition channel)
6. [ ] **Deployment Demo** (Helps others use the platform)

## Technical Considerations
- [ ] Implement caching for AI-generated content
- [ ] Secure API keys and user data
- [ ] Design for multiple concurrent users
- [ ] Add analytics for feature usage
- [ ] Unit tests for each new feature

- [ ] Playlists will be auto generated as more music is added to the platform, for now we should have a minimum of playlists.
- [ ] Bypass upload when artist name is missing from metadata, currently it refuses to upload asking for artist name yet there's no input box for artist name.
- [ ] Please verify where files are being uploaded, ideally I want B2 to be default location for audio files and local storage to be used as fallback.

## Robust Upload Error Handling (Action Items)
- Backend:
  - [ ] Return structured errors with error_code, error, detail, and hints per step (validation, metadata, storage, database).
  - [ ] Distinguish 4xx vs 5xx: 400 (validation), 413 (too large), 415 (unsupported type), 409 (duplicate), 500 (server).
  - [ ] Improve metadata extraction messages: include mutagen exception details and detected format; detect corrupted/zero-length files.
  - [ ] Add granular B2 errors (auth, bucket not found, timeout) and retries with backoff.
  - [ ] Add correlation ID per upload and consistent logging context across steps.
- Frontend:
  - [ ] Parse backend error_code and show user-friendly guidance with next steps.
  - [ ] Offer: retry metadata extraction or continue without certain metadata.
  - [ ] If artist missing in metadata, allow bypass (use "Unknown Artist") or prompt for input.
- Monitoring & Testing:
  - [ ] Add Sentry/log aggregation; retain upload logs by track ID.
  - [ ] Test matrix: mp3, wav, flac, aiff, ogg, m4a; edge cases (huge file, truncated/corrupted, missing tags).

## Storage Defaults Verification
- [ ] B2 as default storage; local only as fallback when B2 fails.
- [ ] Extend `/health` or add `/storage/health` to expose: b2_configured, bucket name, and optional write test.
- [ ] Log uploaded location (B2 key or local path) in success response and admin logs.
- [ ] Admin setting to force local storage for development/testing.

## 2025-08-09 Updates
- [x] Standardized SQLite to single DB at `backend/papzin_crew.db` (removed duplicate root `papzin_crew.db`).
- [x] Updated Alembic `sqlalchemy.url` to match backend DB path.
- [x] Ensured Git ignores: `__pycache__/`, `.venv/`, `venv/`, and both `backend/papzin_crew.db` and root `papzin_crew.db`.
- [x] Git history cleanup: removed tracked `__pycache__` files from repo.
- [x] Branches: merged `feature/uploads-management` into `main` and deleted the feature branch (local + remote).
- [ ] Verify DB migrations run cleanly against `backend/papzin_crew.db`.
- [ ] Add `/storage/health` endpoint (or extend `/health`) to report B2 configuration and optional write test.
- [ ] Confirm backend success responses log and return uploaded storage location (B2 key vs local path).
- [ ] Remove hard coded songs and only show uploaded songs.
- [ ] Create dashboard to manage uploads.

## Tracked Checklist (Prioritized)

### P0 ‚Äî Now (Stability, Correctness, Visibility)
- [ ] Remove hard-coded songs and show only uploaded tracks
- [ ] Uploads dashboard (basic list + status, sort/filter, delete/rehydrate)
- [ ] Bypass artist-missing block (default to "Unknown Artist" or prompt on UI)
- [ ] Robust error responses (backend)
  - [ ] Structured errors: `error_code`, `error`, `detail`, `hints`
  - [ ] Clear 4xx vs 5xx mapping (400/413/415/409 vs 500)
  - [ ] Better metadata error messages (mutagen details, format, corrupted/zero-length detection)
  - [ ] Granular B2 errors + retries with backoff
  - [ ] Correlation ID per upload + consistent logging context
- [ ] Robust error handling (frontend)
  - [ ] Parse `error_code` and show actionable guidance
  - [ ] Offer retry metadata extraction or continue without some metadata
  - [ ] If artist missing: allow bypass or capture artist inline
- [ ] Monitoring & QA
  - [ ] Add Sentry/log aggregation; retain per-track upload logs
  - [ ] Test matrix: mp3/wav/flac/aiff/ogg/m4a; large/truncated/corrupted/missing tags
- [ ] B2-first storage verification
  - [ ] `/storage/health` (or extend `/health`): `b2_configured`, bucket name, optional write test
  - [ ] Log and return uploaded location (B2 key vs local path) in success response
  - [ ] Admin setting to force local for dev/testing
- [ ] DB migrations sanity: verify Alembic against `backend/papzin_crew.db`

### P1 ‚Äî Next (Core Product Growth)
- [ ] Smart duplicate detection v2
  - [ ] Audio fingerprinting (chromaprint/acoustid)
  - [ ] File hash comparison
  - [ ] Preferences for duplicate handling (replace/keep both/cancel)
  - [ ] Fuzzy matching for near-duplicates
- [ ] Audio analysis foundation
  - [ ] Extract/store BPM
  - [ ] Extract/store musical key
  - [ ] Beat detection (baseline)
  - [ ] Waveform generation for visualization
- [ ] Search & discovery v1
  - [ ] BPM range search
  - [ ] Key-based search
  - [ ] Genre/mood filters
  - [ ] Recently played/trending
- [ ] Player UX polish
  - [ ] Fullscreen/theater mode
  - [ ] Enlarge artwork and controls
  - [ ] Visualizer/waveform in enlarged mode
  - [ ] Keyboard shortcuts (Space play/pause; arrows seek)
  - [ ] Remember preferred view mode
- [ ] UX basics
  - [ ] Dark/light theme toggle
  - [ ] Responsive design improvements
- [ ] AI prompts improvements
  - [ ] Optimize prompt templates
  - [ ] Performance optimizations for large libraries
  - [ ] Accessibility improvements

### P2 ‚Äî Later (Expansion)
- [ ] Auto-generated playlists by BPM/genre/mood
- [ ] Workout Mix (high-BPM) and Chill Mix (low-BPM)
- [ ] Radio mode with similar tracks
- [ ] Social features
  - [ ] Playlist sharing
  - [ ] Collaborative playlists
  - [ ] Like/favorite system
  - [ ] Profiles with listening history
  - [ ] Follow users/artists
- [ ] AI Prompt Agent
  - [ ] Metadata + mood analysis; genre templates
  - [ ] GPT/Claude-based prompt generation
  - [ ] Learn from feedback; A/B test prompts
  - [ ] Prompt history and reuse
- [ ] WhatsApp bot integration
  - [ ] Business API; commands (/search, /latest, /random, /playlist)
  - [ ] Secure expiring links; auth via phone
  - [ ] Admin controls; analytics; notifications
  - [ ] Voice message support; NLP for requests
- [ ] Deployment demo
  - [ ] Dockerization
  - [ ] One-click deploy scripts (Heroku, Vercel, Railway, DO App Platform)
  - [ ] Env automation; migration scripts; SSL; CDN; monitoring/logging; backups
  - [ ] Video walkthrough; docs; troubleshooting; scaling tips

## 2025-08-10 Updates

- [x] Frontend build fix:
  - [x] Resolved JSX syntax error in `frontend/project/src/components/UploadPage.tsx` upload status modal.
  - [x] Switched conditional render from `&&` to a ternary and added a missing closing `</div>` for the overlay container.
  - [x] Verified build passes: `npm run build` succeeds.
- [x] Documentation updates:
  - [x] `README.md`: Updated stack to React + Vite, corrected repo URL, frontend path (`frontend/project`) and dev port (5173), clarified storage defaults (Backblaze B2 by default, local fallback), and added Environment notes (`VITE_API_URL`, backend `.env`).
  - [x] `QUICKSTART.md`: Refreshed features to reflect multi-phase upload progress, cancel upload, environment configuration, and storage notes.
- [x] Duplicate/Overwrite flow hardening:
  - [x] Frontend duplicate banner: "Upload Anyway" now prevents default/bubbling, disables while publishing, and logs clicks.
  - [x] `handlePublish(true)`: clears duplicate UI, appends `skip_duplicate_check=true`, logs force path, and sends XHR.
  - [x] Backend: when `skip_duplicate_check` is true and B2 is configured, generate a unique audio key to avoid DB unique constraint conflicts; still returns 409 when not forced.
  - [x] Custom prompt is optional; blank means generate automatically (no blocking validation).
  - [x] Progress bar bug fixed: upload progress events only update during `file_upload` phase so overall progress advances 0‚Äì40‚Äì70‚Äì100 correctly.
- [ ] Run dev servers and test upload flow across phases and error states; verify cancel resets all state.
- [ ] Verify B2 default + local fallback behavior and surface storage location in success responses/logs.
- [ ] Remove hard-coded songs and only show uploaded songs.
- [ ] Create an uploads management dashboard.

  The end goal for now is that I want to be able to stream this from my phone and computer. I just want to be able to have a music website experience of playing the music I have uploaded.